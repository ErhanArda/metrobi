{"version":3,"sources":["components/Header.js","components/FindDublicate.js","components/Footer.js","components/Async.js","components/Paranthesis.js","components/Graph.js","components/Paradox.js","components/BagMax.js","components/FlexBox.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","className","style","color","fontSize","display","alignItems","justifyContent","FindDublicate","useState","popoverOpen","setPopoverOpen","dubArray","setDubArray","inputValue","setInputValue","Button","id","type","background","Popover","placement","isOpen","target","toggle","PopoverHeader","PopoverBody","value","onChange","e","onClick","JSON","stringify","arr","sorted_arr","slice","sort","results","i","length","push","getDuplicate","map","item","Footer","Async","role","setDisplay","useEffect","forEach","index","setTimeout","Math","pow","Paranthesis","controlArr","isBalanced","input","bracket","bracketsIndex","indexOf","pop","console","log","Graph","Progress","multi","bar","Paradox","duration","progress","setProgress","Date","now","startTime","setsStartTime","queuedFrame","frame","requestAnimationFrame","min","cancelAnimationFrame","useAnimation","reset","round","cx","cy","r","fill","BagMax","kg","price","amount","carrotTypes","capacity","efficent","cap","reduce","acc","curr","newCap","maxEfficent","parseFloat","max","maxEfficentIndex","howManyCouldAdded","bagWeight","parseInt","need","needKg","bagLast","newNeed","FlexBox","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3040a634.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar } from 'reactstrap';\nimport '././styles.css'\n\n\nconst Header = () => {\n\n    return (\n        <div>\n            <Navbar className=\"header\" style={{\n                color: \"white\",\n                fontSize: \"1.5rem\",\n                display: \"flex\",\n                alignItems: 'center',\n                justifyContent: \"center\"\n            }}>\n                <span className=\"text\">Header</span>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\n\n\nconst FindDublicate = () => {\n    const [popoverOpen, setPopoverOpen] = useState(false);\n    const toggle = () => setPopoverOpen(!popoverOpen);\n\n    const [dubArray, setDubArray] = useState([])\n    const [inputValue, setInputValue] = useState(\"\")\n\n    const getDuplicate = (arr) => {\n\n        let sorted_arr = arr.slice().sort();\n        let results = [];\n        for (let i = 0; i < sorted_arr.length - 1; i++) {\n            if (sorted_arr[i + 1] === sorted_arr[i]) {\n                results.push(sorted_arr[i]);\n            }\n        }\n        return results;\n\n    }\n    return (\n        <div className=\"centerButton\">\n            <Button id=\"Popover4\" type=\"button\" style={{background:\"white\",color:\"black\"}}>\n                Dublicate\n            </Button>\n            <Popover placement=\"right\" isOpen={popoverOpen} target=\"Popover4\" toggle={toggle}>\n                <PopoverHeader>Dublicate</PopoverHeader>\n                <PopoverBody>\n                    <input\n                        type=\"text\"\n                        value={inputValue}\n                        onChange={(e) => {\n                            setInputValue(e.target.value)\n                        }}\n                    />\n                    <button onClick={() => {\n                        inputValue &&\n                            setDubArray([...dubArray, inputValue])\n                        setInputValue(\"\")\n                    }}>Add</button>\n\n                    <h2>{JSON.stringify(dubArray)}</h2>\n                    <h2>Dublicate Array Elements</h2>\n                    <ul>{getDuplicate(dubArray).map(item => {\n                        return <li>{item}</li>\n                    })}</ul>                    </PopoverBody>\n            </Popover>\n        </div>\n    )\n}\n\nexport default FindDublicate\n","import React from 'react';\nimport '././styles.css'\n\nconst Footer = () => {\n\n    return (\n        <div className=\"footer\" style={{    \n            color: \"white\",\n            fontSize: \"2rem\",\n            display: \"flex\",\n            alignItems: 'center',\n            justifyContent: \"center\"\n            \n        }}>\n            <span className=\"text\">Footer</span>\n        </div>\n    )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\n\nconst Async = () => {\n    const [popoverOpen, setPopoverOpen] = useState(false);\n    const toggle = () => setPopoverOpen(!popoverOpen);\n\n    const [role, setRole] = useState([\"a\", \"b\", \"c\", \"d\", \"e\"])\n    const [display, setDisplay] = useState(\"\")\n\n\n    useEffect(() => {\n        role.forEach((item, index) => {\n\n            setTimeout(() => {\n                setDisplay(item)\n            }, 1000 * Math.pow(2, index))\n        })\n    }, [])\n    return (\n        <div className=\"centerButton\">\n            <Button id=\"Popover3\" type=\"button\" style={{background:\"rebeccapurple\",color:\"white\"}}>\n            [\"a\", \"b\", \"c\", \"d\", \"e\"]\n            </Button>\n            <Popover placement=\"right\" isOpen={popoverOpen} target=\"Popover3\" toggle={toggle}>\n                <PopoverHeader>\n                    [\"a\", \"b\", \"c\", \"d\", \"e\"]\n                </PopoverHeader>\n                <PopoverBody>\n                    <h2>{JSON.stringify(role)}</h2>\n                    <span>Each element is pressed according to (2)<sup>index</sup> time</span>\n                    <h3>{display}</h3>\n                </PopoverBody>\n            </Popover>\n        </div>\n\n\n    )\n}\n\nexport default Async\n\n","import React, { useState } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\n\nconst Paranthesis = () => {\n    const [popoverOpen, setPopoverOpen] = useState(false);\n    const toggle = () => setPopoverOpen(!popoverOpen);\n    let brackets = \"[]{}()<>\"\n    let controlArr = []\n\n    let isBalanced = (input) => {\n\n        for (let bracket of input) {\n            let bracketsIndex = brackets.indexOf(bracket)\n\n            if (bracketsIndex % 2 === 0) {\n                controlArr.push(bracketsIndex + 1)\n            } else {\n                if (controlArr.pop() !== bracketsIndex) {\n                    return false;\n                }\n            }\n        }\n        return controlArr.length === 0\n    }\n\n    console.log(isBalanced('([])'))\n    console.log(isBalanced('([{<}])'))\n    console.log(isBalanced('([,])'))\n\n    return (\n        <div className=\"centerButton\">\n            <Button id=\"Popover2\" type=\"button\" style={{background:\"aqua\",color:\"blue\"}}>\n                {`[]{}()<>`}\n            </Button>\n            <Popover placement=\"bottom\" isOpen={popoverOpen} target=\"Popover2\" toggle={toggle}>\n                <PopoverHeader>{`[]{}()<>`}</PopoverHeader>\n                <PopoverBody>\n                    Parentheses results could seen on the console with F12!\n                    <br/>('([])')) returns true\n                    <br/>([{`<`}]) returns false\n                    <br/>('([,])') returns false\n                </PopoverBody>\n            </Popover>\n        </div>\n    )\n}\n\nexport default Paranthesis\n","import React from 'react'\nimport { Progress, Button } from 'reactstrap';\n\nconst Graph = () => {\n    return (\n        <>\n            <Progress multi className>\n                <Progress bar value=\"50\">50%</Progress>\n                <Progress bar color=\"success\" value=\"25\">\n                    25%</Progress>\n                <Progress bar color=\"info\" value=\"12.5\">%12.5</Progress>\n                <Progress bar color=\"warning\" value=\"6.25\">%6.25</Progress>\n                <Progress bar color=\"danger\" value=\"3.75\">%3.75</Progress>\n                <Progress bar value=\"1.875\">%1.875</Progress>\n                <Progress bar color=\"success\" value=\"1.875\">%1.875</Progress>\n            </Progress>\n        </>\n    )\n}\n\nexport default Graph\n","import React, { useState, useEffect } from 'react'\nimport { Button } from 'reactstrap';\nimport Graph from \"./Graph\"\n\nconst useAnimation = (duration) => {\n\n  const [progress, setProgress] = useState(0)\n  const [startTime, setsStartTime] = useState(Date.now())\n\n  useEffect(() => {\n    let queuedFrame\n    const frame = () => {\n      const now = Date.now() - startTime\n      if (now < duration) {\n        queuedFrame = requestAnimationFrame(frame)\n      }\n      setProgress(Math.min(1, now / duration))\n    }\n    frame()\n    return () => cancelAnimationFrame(queuedFrame)\n  }, [startTime, duration])\n  const reset = () => { setsStartTime(Date.now()) }\n  return [progress, reset]\n}\n\n\nconst Paradox = () => {\n  const [progress, reset] = useAnimation(1000)\n  return (\n    <div className=\"para\">\n      <h2>Zeno's Paradox of Achilles and the Tortoise</h2>\n      <Button color=\"danger\" onClick={reset} >Start!</Button>\n      <br />\n      <p>Tortoise progress: {Math.round(progress * 25)}%</p>\n\n      {/* cx={`${5 * (index + 1)}%`} \n        <circle cx=\"10\" cy=\"5\" r=\"5\" stroke=\"black\" stroke-width=\"3\" fill=\"red\"  onClick={reset} /> */}\n\n      <svg className=\"svg1\">\n        <circle className=\"circle-1\" cx={`${49 + progress * 25}%`} cy=\"55\" r=\"20\" fill=\"green\" />\n      </svg>\n\n      <div className=\"tortoise\">\n        <Graph />\n      </div>\n      <p>Achilles progress: {Math.round(progress * 50)}%</p>\n\n      <svg className=\"svg1\">\n        <circle className=\"circle-2\" cx={`${0 + progress * 50}%`} cy=\"45\" r=\"30\" />\n      </svg>\n      <div className=\"achille\">\n        <Graph />\n\n      </div>\n      <p>Tortoise progress: {Math.round(progress * 12)}.5%</p>\n\n\n      <svg className=\"svg1\">\n\n        <circle className=\"circle-1\" cx={`${74 + progress * 12.5}%`} cy=\"55\" r=\"20\" />\n      </svg>\n\n      <div className=\"tortoise\">\n        <Graph />\n\n      </div>\n      <p>Achilles progress: {Math.round(progress * 25)}%</p>\n\n      <svg className=\"svg1\">\n        <circle className=\"circle-2\" cx={`${50 + progress * 25}%`} cy=\"45\" r=\"30\" />\n      </svg>\n      <div className=\"achille\">\n        <Graph />\n\n      </div>\n      <div>\n        <hr></hr>\n        <hr></hr>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Paradox\n","import React, { useState } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\n\n\n\nconst BagMax = () => {\n    const [popoverOpen, setPopoverOpen] = useState(false);\n    const toggle = () => setPopoverOpen(!popoverOpen);\n    const [carrotTypes, setCarrotTypes] = useState([{ kg: 5, price: 100, amount: 1 }, { kg: 7, price: 150, amount: 1 }, { kg: 3, price: 70, amount: 1 }])\n    const [capacity, setCapacity] = useState(36)\n    // carrot: 0\n\n\n    let efficent = carrotTypes.map((item) => {\n        return item.price / item.kg\n    })\n    console.log(\"efficent: \", efficent)\n\n    let cap = carrotTypes.map((item) => {\n        return item.kg\n\n    }).reduce((acc, curr) => {\n        return acc + curr\n    }, 0)\n    let newCap = capacity - cap\n    console.log(\"added bag weight: \", cap)\n\n\n    if (cap !== capacity) {\n\n        let maxEfficent = parseFloat(Math.max(...efficent))\n        console.log(\"maxEfficent: \", maxEfficent)\n        console.log(\"remain new capacity: \", newCap);\n\n        let maxEfficentIndex = efficent.indexOf(maxEfficent)\n        console.log(\"max efficent carrot index: \", maxEfficentIndex);\n\n        let howManyCouldAdded = newCap / carrotTypes[maxEfficentIndex].kg\n        console.log(\"howManyCouldAdded: \", howManyCouldAdded);\n\n\n\n        let bagWeight = parseFloat(parseInt(howManyCouldAdded) * carrotTypes[maxEfficentIndex].kg + cap)\n\n        console.log(\"total bag weight: \", bagWeight)\n        if (capacity > bagWeight) {\n            let need = capacity - bagWeight;\n            console.log(\"need: \", need)\n\n\n            let needKg = carrotTypes.map((item) => {\n                return item.kg\n            })\n                    console.log(\"needKg\",needKg);\n                    \n            let bagLast=bagWeight - carrotTypes[maxEfficentIndex].kg\n            console.log(\"bagLast\" ,bagLast)\n\n            let newNeed = capacity - (bagWeight - carrotTypes[maxEfficentIndex].kg)\n            console.log(\"newNeed\",newNeed);\n            \n            console.log(\"yep:\", needKg.map((item) => {\n                if (item === newNeed){\n                    let result = newNeed + bagLast\n                    return result\n                } else if(item !== newNeed){\n                    let bagLast=bagWeight - carrotTypes[maxEfficentIndex].kg\n                    console.log(\"bagLast\" ,bagLast)\n                    let newNeed = capacity - (bagWeight - carrotTypes[maxEfficentIndex].kg)\n                    console.log(\"newNeed\",newNeed);\n                    \n\n                }else{\n                    return console.log(\"ok\")\n                }\n                // if (item >= need) {\n                //     let result = bagWeight - carrotTypes[maxEfficentIndex].kg\n                //     return result\n                // }\n            }))\n        }\n\n    } else {\n        console.log(\"enough\")\n    }\n\n\n    return (\n        <div className=\"centerButton\">\n            <Button id=\"Popover5\" type=\"button\" style={{background:\"red\",color:\"white\"}}>\n                            getMaxValue\n                        </Button>\n                        <Popover placement=\"right\" isOpen={popoverOpen} target=\"Popover5\" toggle={toggle}>\n                            <PopoverHeader>getMaxValue</PopoverHeader>\n                            <PopoverBody>\n                                    {capacity}\n                                    <br/>\n                                    getMaxValue results could seen on the console with F12!\n                                    <br/>\n                                    carrotTypes  kg: 5, price: 100; <br/>kg: 7, price: 150, <br/>kg: 3, price: 70<br/>\n                                    capacity = 36 kg\n                                </PopoverBody>\n                        </Popover>\n        </div>\n    )\n}\n\nexport default BagMax\n\n// 7) Think that you have an unlimited number of carrots, but limited number of carrot\n// types. Also, you have one bag that can hold a limited weight. Each type of carrot has a\n// weight and a price. Write a function that takes carrotTypes and capacity and return the\n// maximum value the bag can hold.\n// Example:\n// carrotTypes = [{kg: 5, price: 100}, {kg: 7, price: 150}, {kg: 3, price: 70}]\n// capacity = 36 //kg\n// getMaxValue(carrotTypes, capacity)\n","import React, { useState } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\nimport FindDublicate from \"./FindDublicate\"\nimport Async from './Async'\nimport Paranthesis from './Paranthesis'\nimport Paradox from \"./Paradox\"\nimport BagMax from './BagMax'\nimport '././styles.css'\n\nconst FlexBox = () => {\n    const [popoverOpen, setPopoverOpen] = useState(false);\n    const toggle = () => setPopoverOpen(!popoverOpen);\n    return (\n        <div className=\"flexbox-container\">\n            <div className=\"flexbox-container-1\">\n                <div className=\"flexbox-item flexbox-item-1\">\n                    <Async />\n                </div>\n                <div className=\"flexbox-item flexbox-item-2\">\n                    <Paranthesis />\n                </div>\n            </div>\n            <div className=\"flexbox-container-1\">\n                <div className=\"flexbox-item flexbox-item-3\">\n                    <FindDublicate />\n                </div>\n                <div className=\"flexbox-item flexbox-item-4\">\n                    <BagMax />\n                </div>\n            </div>\n            <div className=\"flexbox-container-2\">\n                <div className=\"flexbox-item flexbox-item-5\">\n                    <div className=\"flex-container centerButton\">\n                        <Button id=\"Popover1\" type=\"button\" style={{background:\"yellow\",color:\"black\"}}>\n                            Two Eggs, 100 floor solution\n                        </Button>\n                        <Popover placement=\"right\" isOpen={popoverOpen} target=\"Popover1\" toggle={toggle}>\n                            <PopoverHeader>Two Eggs, 100 floor</PopoverHeader>\n                            <PopoverBody>\n                                    x(x + 1)/2 = 100\n                                    And some math...\n                                    x = 13.651\n                                    to start dropping from floor 14,\n                                    jump up 13 floors to drop from floor 27, jump up 12\n                                    floors to drop from floor 39, and so on.\n                                    Our worst case scenario is then a drop count total of 14.\n                                </PopoverBody>\n                        </Popover>\n                    </div>\n                </div>\n                <div className=\"flexbox-item flexbox-item-6\">\n                    6\n                </div>\n            </div>\n            <div className=\"flexbox-container-3\">\n                <div className=\"flexbox-item-7\">\n                    <Paradox />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FlexBox\n","import React from 'react'\nimport { Header, Footer, FlexBox } from './components'\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <FlexBox />\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n  \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}